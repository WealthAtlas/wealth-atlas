name: Deploy WealthAtlas

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      region:
        description: 'AWS Region for deployment'
        required: false
        default: 'us-east-2'
        type: string

env:
  AWS_REGION: ${{ github.event.inputs.region || 'us-east-2' }}

jobs:
  terraform:
    name: 'Deploy Infrastructure'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
      
    - name: Terraform Init
      run: |
        cd terraform
        terraform init
      
    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -var="mongodb_uri=${{ secrets.MONGODB_URI }}"
      
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: |
        cd terraform
        terraform apply -auto-approve -var="mongodb_uri=${{ secrets.MONGODB_URI }}"
        
    - name: Export Terraform Outputs
      if: github.ref == 'refs/heads/main'
      id: terraform-output
      run: |
        cd terraform
        echo "ECR_REPO=$(terraform output -raw ecr_repository_url)" >> $GITHUB_OUTPUT
        echo "S3_BUCKET=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
        echo "FRONTEND_URL=$(terraform output -raw frontend_url)" >> $GITHUB_OUTPUT
        echo "BACKEND_URL=$(terraform output -raw backend_url)" >> $GITHUB_OUTPUT
        
  build_and_deploy_backend:
    name: 'Build and Deploy Backend'
    needs: terraform
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build and push Docker image
      env:
        ECR_REPOSITORY: ${{ needs.terraform.outputs.ECR_REPO }}
      run: |
        docker build -t $ECR_REPOSITORY:latest -f Dockerfile.backend .
        docker push $ECR_REPOSITORY:latest
        
  build_and_deploy_frontend:
    name: 'Build and Deploy Frontend'
    needs: [terraform, build_and_deploy_backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install pnpm
      run: npm install -g pnpm
      
    - name: Install dependencies
      run: pnpm install
    
    - name: Setup Backend URL
      env:
        BACKEND_URL: ${{ needs.terraform.outputs.BACKEND_URL }}
      run: |
        echo "NEXT_PUBLIC_API_URL=$BACKEND_URL/graphql" > apps/frontend/.env.production
        cat apps/frontend/.env.production
    
    - name: Build frontend
      run: |
        cd apps/frontend
        pnpm build
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Deploy to S3
      env:
        S3_BUCKET: ${{ needs.terraform.outputs.S3_BUCKET }}
      run: |
        aws s3 sync ./apps/frontend/out/ s3://$S3_BUCKET/ --delete
    
    - name: Get CloudFront distribution ID
      id: cloudfront
      run: |
        cd terraform
        DISTRIBUTION_ID=$(terraform output -raw frontend_distribution_id || echo "")
        echo "DISTRIBUTION_ID=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT
    
    - name: Invalidate CloudFront cache
      if: steps.cloudfront.outputs.DISTRIBUTION_ID != ''
      run: |
        aws cloudfront create-invalidation --distribution-id ${{ steps.cloudfront.outputs.DISTRIBUTION_ID }} --paths "/*"

  setup_mongodb:
    name: 'Setup MongoDB Collections'
    needs: [terraform, build_and_deploy_backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install MongoDB Tools
      run: |
        sudo apt-get update
        sudo apt-get install -y mongodb-database-tools mongodb-mongosh
        
    - name: Setup MongoDB Collections
      env:
        MONGODB_URI: ${{ secrets.MONGODB_URI }}
      run: |
        chmod +x ./scripts/mongodb_setup.sh
        ./scripts/mongodb_setup.sh
